import streamlit as st
import json
import os
from utils.navigation import render_sidebar
from datetime import datetime
import markdown2
import pandas as pd
from jinja2 import Template
from weasyprint import HTML

SALVAMENTO_DIR = "simulacoes_salvas"
os.makedirs(SALVAMENTO_DIR, exist_ok=True)


def gerar_html_proposta():
    logo_url = "https://upload.wikimedia.org/wikipedia/commons/5/51/IBM_logo.svg"

    diagnostico = st.session_state.get("resultado_diagnostico", "")
    objetivos = st.session_state.get("objetivos", "")
    solucao = st.session_state.get("solucao_tecnica", "")
    premissas = st.session_state.get("premissas_limitacoes", "")
    proposta_tipo = st.session_state.get("proposta_tipo", "Fixed-price")
    cronograma_df = st.session_state.get("cronograma_df", pd.DataFrame())

    total = st.session_state.get("total_geral", 0)
    preco_final = st.session_state.get("total_com_adicional", total)

    cronograma_html = ""
    if not cronograma_df.empty:
        cronograma_html += "<table><tr><th>Month</th><th>Professional</th><th>Hours</th><th>Hourly Rate</th><th>Total Cost</th></tr>"
        for _, row in cronograma_df.iterrows():
            cronograma_html += f"<tr><td>{row['MÃªs']}</td><td>{row['Profissional']}</td><td>{row['Horas']}</td><td>R$ {row['Custo Hora']:,.2f}</td><td>R$ {row['Custo Total']:,.2f}</td></tr>"
        cronograma_html += "</table>"

    html = f"""
    <html>
    <head>
        <style>
            body {{ font-family: 'IBM Plex Sans', sans-serif; margin: 40px; color: #333; }}
            h1, h2, h3 {{ color: #0f62fe; }}
            .header {{ display: flex; align-items: center; margin-bottom: 30px; }}
            .header img {{ height: 50px; margin-right: 20px; }}
            table {{ width: 100%; border-collapse: collapse; margin-top: 10px; }}
            th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
            th {{ background-color: #f4f4f4; }}
            footer {{ font-size: 0.8em; margin-top: 40px; text-align: center; color: #777; }}
        </style>
    </head>
    <body>
        <div class="header">
            <img src="{logo_url}" alt="IBM Logo">
            <h1>Technical Proposal for Data Science Project</h1>
        </div>

        <h2>1. Diagnosis</h2>
        <p>{diagnostico.replace('\n', '<br>')}</p>

        <h2>2. Objectives</h2>
        <p>{objetivos.replace('\n', '<br>')}</p>

        <h2>3. Technical Solution</h2>
        <p>{solucao.replace('\n', '<br>')}</p>

        <h2>4. Timeline and Cost</h2>
        {cronograma_html}
        <p><strong>Total Cost:</strong> R$ {total:,.2f}</p>
        <p><strong>Estimated Final Price:</strong> R$ {preco_final:,.2f}</p>

        <h2>5. Commercial Model</h2>
        <p>{proposta_tipo}</p>

        <h2>6. Premises and Limitations</h2>
        <p>{premissas.replace('\n', '<br>')}</p>

        <footer>
            Generated by IBM AI Proposal Simulator | Confidential
        </footer>
    </body>
    </html>
    """
    return html


def gerar_pdf():
    html_content = gerar_html_proposta()
    nome_arquivo = f"proposta_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    caminho = os.path.join(SALVAMENTO_DIR, nome_arquivo)
    HTML(string=html_content).write_pdf(caminho)
    return caminho


def render():
    st.subheader("âœ… Stage 7: Proposal Closure and Export")

    preco_final = st.session_state.get("total_com_adicional", 0.0)
    st.markdown("### ðŸ’° Estimated Final Price")
    st.markdown(f"## `R$ {preco_final:,.2f}`")

    # Inputs with automatic save
    def text_area_with_save(label, key):
        value = st.text_area(label, value=st.session_state.get(key, ""), height=150)
        if value != st.session_state.get(key, ""):
            st.session_state[key] = value
            st.info("Changes saved automatically")

    st.markdown("### 1. Diagnosis")
    text_area_with_save("Describe the diagnosis made:", "resultado_diagnostico")

    st.markdown("### 2. Objectives")
    text_area_with_save("Define the project objectives:", "objetivos")

    st.markdown("### 3. Technical Solution")
    text_area_with_save("Describe the proposed technical solution:", "solucao_tecnica")

    st.markdown("### 4. Timeline and Cost")
    if "cronograma_df" in st.session_state:
        st.dataframe(st.session_state.cronograma_df, use_container_width=True)
        st.markdown(f"**Total Cost:** R$ {st.session_state.get('total_geral', 0):,.2f}")
        st.markdown(
            f"**Estimated Final Price with additional:** R$ {st.session_state.get('total_com_adicional', 0):,.2f}"
        )
    else:
        st.info("No timeline has been set.")

    st.markdown("### 5. Commercial Model")
    proposta_tipo = st.selectbox(
        "Select the type of commercial proposal:",
        options=["Time & Materials", "Fixed-price"],
        index=["Time & Materials", "Fixed-price"].index(
            st.session_state.get("proposta_tipo", "Time & Materials")
        ),
    )
    st.session_state.proposta_tipo = proposta_tipo

    st.markdown("### 6. Premises and Limitations")
    text_area_with_save(
        "List relevant assumptions and limitations:", "premissas_limitacoes"
    )

    st.markdown("---")
    st.markdown("### ðŸ’¾ Save or Load Simulation")

    if st.button("ðŸ’¾ Save Simulation in JSON"):
        file_name = f"simulacao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        json_data = json.dumps(dict(st.session_state), indent=2, default=str)
        file_path = os.path.join(SALVAMENTO_DIR, file_name)
        with open(file_path, "w") as f:
            f.write(json_data)
        st.success(f"Simulation saved successfully in `{file_path}`")
        with open(file_path, "rb") as f:
            st.download_button(
                "ðŸ“¥ Download JSON", data=f, file_name=file_name, mime="application/json"
            )

    uploaded_file = st.file_uploader(
        "ðŸ“‚ Load previous simulation (.json)", type=["json"]
    )
    if uploaded_file:
        data = json.load(uploaded_file)
        for key, value in data.items():
            st.session_state[key] = value
        st.success("Simulation loaded successfully! Reload the page to see updates.")

    st.markdown("---")
    st.markdown("### ðŸ“„ Export to PDF")
    if st.button("ðŸ“„ Generate Proposal PDF"):
        with st.spinner("Generating PDF..."):
            caminho_pdf = gerar_pdf()
            with open(caminho_pdf, "rb") as f:
                st.download_button(
                    label="ðŸ“¥ Download PDF",
                    data=f,
                    file_name=os.path.basename(caminho_pdf),
                    mime="application/pdf",
                )
